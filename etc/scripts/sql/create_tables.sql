do $$
    begin
        CREATE TABLE IF NOT EXISTS public.brands(
            id INT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
            brand_name varchar(32) NOT NULL,
            cyrillic_name varchar(32),
            popular boolean DEFAULT FALSE,
            country varchar(32)
        );

        CREATE TABLE IF NOT EXISTS public.models(
            id INT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
            model_name varchar(48) NOT NULL,
            cyrillic_name varchar(48),
            brand_id int REFERENCES brands (id)
        );

        CREATE TABLE IF NOT EXISTS public.user_cars(
            id INT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
            brand_id int REFERENCES public.brands (id),
            model_id int REFERENCES public.models (id)
        );

        CREATE TABLE IF NOT EXISTS public.customers(
            id INT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
            username varchar(32) NOT NULL,
            car_id int REFERENCES public.user_cars (id),
            blocked boolean DEFAULT FALSE
        );

        CREATE TABLE IF NOT EXISTS public.sellers(
            id INT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
            username varchar(32) NOT NULL,
            available_advertisements int DEFAULT 0
        );

        CREATE TABLE IF NOT EXISTS public.admins(
            id INT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
            username varchar(32) NOT NULL
        );

        CREATE TABLE IF NOT EXISTS public.tariffs(
            id INT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
            tariff_name varchar(32) NOT NULL,
            description varchar(128),
            tariff_price int NOT NULL,
            advertisements_count int NOT NULL
        );

        CREATE TABLE IF NOT EXISTS public.verification_codes(
            id INT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
            code int NOT NULL
        );

        CREATE TABLE IF NOT EXISTS public.bills(
            id INT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
            user_id int REFERENCES public.sellers (id),
            tariff_id int REFERENCES public.tariffs (id),
            paid boolean DEFAULT FALSE,
            creation_date timestamp DEFAULT now(),
            expiration_date timestamp,
            code_id int REFERENCES publicverification_codes (id)
        );

        CREATE TABLE IF NOT EXISTS public.external_menu_sections(
            id INT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
            section_name varchar(32)
        );

        CREATE TABLE IF NOT EXISTS public.internal_menu_sections(
            id INT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
            section_name varchar(32),
            external_section_id int REFERENCES public.external_menu_sections(id)
        );

        CREATE TABLE IF NOT EXISTS public.details(
            id INT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
            detail_name varchar(32),
            seller_id int REFERENCES public.sellers (id),
            external_section_id int REFERENCES public.external_menu_sections (id),
            internal_section_id int REFERENCES public.internal_menu_sections (id),
            brand_id int REFERENCES public.brands (id),
            model_id int REFERENCES public.models (id),
            description varchar(256),
            image_id varchar(64),
            price float,
            closed boolean DEFAULT FALSE
        );
    end
$$

# TODO: customer and seller tables save the same data id(telegram user id) and username
# TODO: + table of blocked users (normalize customers table)
